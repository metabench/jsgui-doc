    'set': (function() {
      var a = arguments;
      a.l = arguments.length;
      var sig = get_a_sig(arguments, 1);
        if (this._abstract) return false;

        var that = this, res;

        var input_processors;
        if (this._module_jsgui) {
            input_processors = this._module_jsgui.input_processors;
        } else {
            input_processors = this._get_input_processors();
        }

        if (a.l == 2 || a.l == 3) {
            var property_name = a[0], value = a[1];
            var ta2 = tof(a[2]);
            var silent = false;
            var source;
            if (ta2 == 'string' || ta2 == 'boolean') {
                silent = a[2]
            }
            if (ta2 == 'control') {
                source = a[2];
            }
            if (!this._initializing && this._map_read_only && this._map_read_only[property_name]) {
                throw 'Property "' + property_name + '" is read-only.';
            } else {
                var split_pn = property_name.split('.');
                if (split_pn.length > 1 && property_name != '.') {
                    var spn_first = split_pn[0];
                    var spn_arr_next = split_pn.slice(1);
                    var data_object_next = this.get(spn_first);
                    if (data_object_next) {
                        var res = data_object_next.set(spn_arr_next.join('.'), value);
                        if (!silent) {
                            var e_change = {
                                'name': property_name,
                                'value': value,
                                'bubbled': true
                            };
                            if (source) {
                                e_change.source = source;
                            }
                            this.raise_event('change', e_change);
                        }
                        return res;
                    } else {
                        throw('No data object at this level.');
                    }
                    throw('10)stop');
                } else {
                    var data_object_next = this.get(property_name);
                    if (data_object_next) {
                        var field = this.field(property_name);
                        if (field) {
                            data_object_next.__type_name = field[1];
                        }
                        data_object_next.set(value);
                    }
                    if (!is_defined(data_object_next)) {
                        var tv = typeof value;
                        var dv;
                        if (tv == 'string' || tv == 'number' || tv == 'boolean' || tv == 'date') {
                            dv = new Data_Value({'value': value});
                        } else {
                            dv = value;
                        }
                        this._[property_name] = dv;
                        if (!silent) {
                            var e_change = {
                                'name': property_name,
                                'value': dv
                            }
                            if (source) {
                                e_change.source = source;
                            }
                            this.raise_event('change', e_change);
                        }
                        return value;
                    } else {
                        var next_is_js_native = is_js_native(data_object_next);
                        if (next_is_js_native) {
                            this._[property_name] = value;
                            res = value;
                        } else {
                            res = data_object_next
                            this._[property_name] = data_object_next;
                        }
                        if (!silent) {
                            var e_change = {
                                'name': property_name,
                                'value': data_object_next.value()
                            };
                            if (source) {
                                e_change.source = source;
                            }
                            this.trigger('change', e_change);
                        }
                        return res;
                    }
                }
            }
        } else {
            var value = a[0];

            var input_processor = input_processors[this.__type_name];

            if (input_processor) {

                var processed_input = input_processor(value);
                value = processed_input;
                this._[property_name] = value;
                this.raise_event('change', {
                    'value': value
                });
                return value;
            } else {
                if (sig == '[D]') {
                    this._[property_name] = value;
                    this.raise_event('change', [property_name, value]);
                    return value;
                }

                if (sig == '[o]') {
                    var that = this;
                    var res = {};
                    each(a[0], function(i, v) {
                        res[i] = that.set(i, v);

                    });
                    return res;
                }

                if (sig == '[c]') {
                    this._[property_name] = value;
                    this.raise_event('change', [property_name, value]);
                    return value;
                }
            }
        }
    }),

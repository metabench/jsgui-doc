    'get': fp(function(a, sig) {

        if (is_defined(this.__type_name)) {
            if (a.l == 0) {
                var output_obj = jsgui.output_processors[this.__type_name](this._);
                return output_obj;
            } else {
                throw 'not yet implemented';
            }
        } else {

            if (sig == '[s,f]') {
                throw 'Asyncronous access not allowed on Data_Object get.'

                var res = this.get(a[0]);
                var callback = a[1];

                if (typeof res == 'function') {
                    res(callback);
                } else {
                    return res;
                }
            }

            if (sig == '[s]') {
                var fc = this.fc;
                var field_name = a[0];
                var field;
                if (fc) {
                    field = fc.get(a[0]);
                }
                if (field_name.indexOf('.') > -1) {
                    var arr_field_names = field_name.split('.');

                    var level = 0, l = arr_field_names.length;
                    var current_obj = this, new_obj, fname;
                    while(level < l) {
                        fname = arr_field_names[level];
                        if (!current_obj) {
                            return undefined;
                        }
                        new_obj = current_obj.get(fname);
                        level++;
                        current_obj = new_obj;
                    }
                    return current_obj;
                }

                if (field) {
                    if (!this._[field_name]) {
                        var sig_field = get_item_sig(field, 20);

                        if (sig_field == '[s,s,f]') {
                            var field_name = field[0];
                            var fieldStrType = field[1];
                            var fieldDef = field[2];

                            if (fieldDef == String) {
                                var dval = new Data_Value({
                                    'context': this._context
                                })
                                this._[field_name] = dval;
                                return this._[field_name];
                            } else if (fieldDef == Number) {
                                var dval = new Data_Value({
                                    'context': this._context
                                })
                                this._[field_name] = dval;
                                return this._[field_name];
                            } else if (fieldStrType == 'Class') {
                                var FieldConstructor = fieldDef;
                                var nObj = new FieldConstructor({
                                    'context': this._context
                                })
                                this._[field_name] = nObj;
                                return this._[field_name];
                            }
                        }

                        if (sig_field == '[s,[s,u]]') {
                            var stack = new Error().stack;
                            console.log(stack);
                        }

                        if (sig_field == '[s,s,o]') {
                            var field_name = field[0];
                            var field_type_name = field[1];
                            var field_info = field[2];

                            if (field_type_name == 'collection') {
                                this._[field_name] = new jsgui.Collection({
                                    'context': this._context
                                });
                                return this._[field_name];
                            } else {
                                if (field_type_name == 'data_object') {
                                    var dobj = new Data_Object({'context': this._context});
                                    this._[field_name] = dobj;
                                    dobj.parent(this);
                                    return this._[field_name];
                                }
                                if (field_type_name == 'ordered_string_list') {
                                    var osl = new Ordered_String_List();
                                    this._[field_name] = osl;
                                    return this._[field_name];
                                } else if (field_type_name == 'string') {
                                    var dv = new Data_Value({
                                        'context': this._context
                                    });
                                    this._[field_name] = dv;
                                    dv.parent(this);
                                    return this._[field_name];
                                } else {
                                    var dt = field_info.data_type;
                                    var dt_sig = get_item_sig(dt, 4);

                                    if (dt_sig == '[s,n]') {
                                        var data_type_name = dt[0];
                                        var data_type_length = dt[1];

                                        if (data_type_name == 'text') {
                                            var dVal = new Data_Value({
                                                'context': this._context
                                            });
                                            this._[field_name] = dVal;
                                            return this._[field_name];
                                        }

                                    } else if (dt_sig == 's') {
                                        var data_type_name = dt;

                                        if (data_type_name == 'int') {
                                            var dVal = new Data_Value({
                                                'context': this._context
                                            });
                                            this._[field_name] = dVal;
                                            return this._[field_name];
                                        }
                                    } else {
                                        var dtoc = this.mod_link().ensure_data_type_data_object_constructor(field_type_name);

                                        var field_val = new dtoc({'context': this._context});
                                        field_val.parent(this);
                                        this._[field_name] = field_val;
                                        return this._[field_name];
                                    }

                                }

                            }

                        } else if (sig_field == '[s,s]') {
                            var field_name = field[0];
                            var field_type_name = field[1];

                            if (field_type_name == 'collection') {

                                throw 'not supported here. should use code in enhanced-data-object.';

                                console.log('pre make coll');
                                var coll = new jsgui.Collection({
                                    'context': this._context
                                });

                                console.log('pre set coll parent');
                                coll.parent(this);

                                this._[field_name] = coll;
                                return this._[field_name];

                            } else if (field_type_name == 'data_object') {
                                var dobj = new jsgui.Data_Object({
                                    'context': this._context
                                })
                                dobj.parent(this);
                                this._[field_name] = dobj;
                                return this._[field_name];

                            } else {
                                var dtoc = jsgui.ensure_data_type_data_object_constructor(field_type_name);
                                //console.log('dtoc ' + dtoc);
                                //throw '!stop';
                                // then use this to construct the empty field.
                                //  without the new constructor it was trying to make an abstract version!!!
                                var obj = new dtoc({'context': this._context});
                                //if (this._context) obj._context = this._context;
                                obj.parent(this);

                                this._[field_name] = obj;
                                //console.log('this._ ' + stringify(this._));

                                return this._[field_name];
                            }
                        } else if (sig_field == '[s,[s,s]]') {
                            var field_name = field[0];
                            var field_info = field[1];

                            if (field_info[0] == 'collection') {
                                var collection_type_name = field_info[1];
                            }
                        } else if (sig_field == '[s,[s,o]]') {

                            var field_name = field[0];
                            var field_info = field[1];
                            var data_type_name = field_info[0];

                            if (data_type_name == 'collection') {
                                var objDef = field_info[1];
                                throw 'not supported here. should use code in enhanced-data-object.';
                            }

                        }

                    } else {
                        return this._[field_name];
                    }
                } else {
                    var res = ll_get(this._, a[0]);
                    if (!res) {
                        if (field_name.indexOf('.') > -1) {
                            throw 'not yet handled';
                        } else {
                            res = this[a[0]];
                        }
                    }
                    return res;
                }

            } else if (a.l == 0) {
                return this._;
            }
        }
    }),

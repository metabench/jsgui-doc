2015-09-04:

data-value.js: clone(): console.log() commented

2015-09-01:

data-object-fields-collection.js:
Fields_Collection.set() at the end:

			if (a.l > 1) {
				...
WAS:		    //this.set(a);
NOW:		    this.set(arr_like_to_arr(a));
            }



			if (sig == '[o]') {
				......

was:

				var a0 = a[0];

				// object.keys will hopefully be faster.

				var a0_keys = Object.keys(a0); 

				var c = 0, l = a0_keys.length;

				for (c = 0; c < l; c++) {
				    this.set(a0[a0_keys[c]]);

				}

				// Older JS code
				/*

				var this_set_call = this.set.call, a0 = a[0];
				for (i in a0) {
				    //console.log(this_set_call);
				    //this_set_call(this, [i, a0[i]]);
				    this.set.call(this, [i, a0[i]]);

				}

				*/


now:

				var a0 = a[0];

				if (Object.keys) {
				    // object.keys will hopefully be faster.
				    var a0_keys = Object.keys(a0);
                    //
				    var c = 0, l = a0_keys.length;
				    for (c = 0; c < l; c++) {
				        var a0_key = a0_keys[c];
				        this.set([a0_key, a0[a0_key]]);
				    }
				} else {
				    // Older JS code
                    for (i in a0) {
                        this.set.call(this, [i, a0[i]]);   
                    }
				}



====================================================================

2015-08-28

* call_multiple_callback_functions(): 
  - console.log commented

* arrayify(): 
  - console.log commented
  - line 1599: "//a[param_index] = a[param_index][c];" changed to "a[param_index] = arguments[param_index][c];"
    (this code branch was not working properly, unit tests failed)
  
* call_multiple_callback_functions():

    var arr_to_call = clone(params) || [];
    //var arr_to_call = (params) || [];

	Initially the "arr_to_call" was a clone of the "params", then it seems changed to a direct reference to the "params". 
	This produces a side effect when a "return_params==true" parameter is passed: the callback function adds to the returned parameters.
	I've changed "arr_to_call" back to the clone (as it looks in the code above).

* Fns()
  - some comments added

* sig_match()

  was: var sig2_parts = sig1_inner.split(',');
  now: var sig2_parts = sig2_inner.split(',');

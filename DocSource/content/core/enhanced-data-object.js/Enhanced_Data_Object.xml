
<h1 class="page-title">Class: Enhanced_Data_Object</h1>

<section>

    <!--==================================================
    =                   Overview
    ===================================================-->

    <header>
        <h2>
            <span class="ancestors"><a href="@link:/core/enhanced-data-object.js.html">core/enhanced-data-object.js</a>.</span>
            Enhanced_Data_Object
        </h2>

        <div class="container-overview">
            <div class="class-description">
                <p>
                    Represents an enhanced class storing a data object.
                </p>
            </div>
            <p>Base class: <span class="ancestors"><a href="@link:/core/data-object.js/Data_Object.html">core/data-object.js:Data_Object</a></span></p>
        </div>
    </header>

    <article>

        <!--==================================================
        =                   Members
        ===================================================-->

        <@section title="Members">

            <!-----------------------------------------
            |   register_data_type(data_type_name, def)
            ------------------------------------------>

            <@item title="static register_data_type(data_type_name, def)">
                <div class="description">
                    <p>
                        Adds (or sets) the data type definition (the <code>def</code> parameter) to the <code>jsgui.data_types_info</code> dictionary
                        for the <code>data_type_name</code> key.
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="data_type_name" type="string" description="data type name" />
                    <@parm name="def" type="?" description="data type definition" />
                </@parms>

                <h5>Example</h5>
                <@codeblock>
                    var myDataTypeDef = { data: "myDataTypeData" };
                    Enhanced_Data_Object.register_data_type("myDataType", myDataTypeDef);
                    //
                    jsgui.data_types_info["myDataType"]  ===  myDataTypeDef
                </@codeblock>

                <h5>Remarks</h5>
                <p>
                    I found the only usage of this function in the <code>jsgui-html-core.js</code> module:
                </p>
                <@codeblock>
                    Enhanced_Data_Object.register_data_type('control_dom', jsgui.data_types_info['control_dom']);
                    Enhanced_Data_Object.register_data_type('dom_attributes', jsgui.data_types_info['dom_attributes']);
                </@codeblock>
                <p>
                    <mark>It looks very strange</mark> because it does the following in fact:
                </p>
                <@codeblock>
                    jsgui.data_types_info['control_dom'] = jsgui.data_types_info['control_dom'];
                    jsgui.data_types_info['dom_attributes'] = jsgui.data_types_info['dom_attributes'];
                </@codeblock>


            </@item>

            <!-----------------------------------------
            |          map_data_type_data_object_constructors
            ------------------------------------------>

            <@item title="static map_data_type_data_object_constructors">
                <div class="description">
                    <p>
                        It is exactly the same name/value array as <a href="@link:/core/data-object.js/Data_Object.html#map_data_type_data_object_constructors">Data_Object.map_data_type_data_object_constructors</a>.
                    </p>
                    <p>
                        <code>Data_Object.map_data_type_data_object_constructors === jsgui.map_data_type_data_object_constructors</code>
                        <code>Enhanced_Data_Object.map_data_type_data_object_constructors === jsgui.map_data_type_data_object_constructors</code>
                    </p>
                    <p>
                        <strong>By the way</strong>, Enhanced_Data_Object uses a slightly different
                        <a href="@link:/core/data-object.js/Data_Object.html#ensure_data_type_data_object_constructor__data_type_name">ensure_data_type_data_object_constructor(data_type_name)</a>
                        function version: it creates an Enhanced_Data_Object descendant instead of Data_Object one.
                        The <code>enhanced-data-object.js</code> module registers the different function version as <code> jsgui.ensure_data_type_data_object_constructor</code> global variable.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock>
                    // The following code is contained in the data_object.js module:
                    jsgui.map_data_type_data_object_constructors['boolean'] = Data_Value;
                </@codeblock>
            </@item>

            <!-----------------------------------------
            |          new Enhanced_Data_Object(spec)
            ------------------------------------------>

            <@item title="new Enhanced_Data_Object(spec-opt)">
                <div class="description">
                    <p>
                        Creates the Enhanced_Data_Object instance.
                    </p>
                    <p>
                        In addition to the <a href="@link:/core/data-object.js/Data_Object.html#newdata_object__spec">Data_Object initialization</a>, 
                        it adds a <code>flags</code> field:
                    </p>
                    <@codeblock>
                        var Enhanced_Data_Object = Data_Object.extend({
                            'fields': [['flags', Collection(String)]],
                            ...
                        });
                    </@codeblock>
                </div>

                <h5>Example</h5>
                <@codeblock>
                    var edo = new Enhanced_Data_Object();
                </@codeblock>
            
                <h5 class="content-part-header collapsed"><mark>flags issue</mark></h5>
                <div>
                    <p>
                       The <code>flags</code> collection field added in the constructor seems not created by the <code>new Collection(String)</code> call. 
                       It has no data_type constraint, and no indexes.
                       <mark>As result, the collection <code>has()</code> and <code>remove()</code> methods does not work properly:</mark>
                    </p>

                    <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:flags issue (doc: new Enhanced_Data_Object())" />
                </div>
            
            </@item>

            <!-----------------------------------------
            |   _get_input_processors()
            ------------------------------------------>

            <@item title="_get_input_processors()">
                <div class="description">
                    <p>
                        Returns <code>jsgui.input_processors</code> variable (exactly as <a href="@link:/core/data-object.js/Data_Object.html#_get_input_processors">Data_Object._get_input_processors()</a> method).
                    </p>
                </div>
            </@item>

            <!-----------------------------------------
            |   add_flag(flag_name)
            ------------------------------------------>

            <@item title="add_flag(flag_name)">
                <div class="description">
                    <p>
                        Adds a flag <code>flag_name</code> to the object flags collection.
                        <mark>The implementation code tries to skip if the flag is added already, but the attempt is unsuccessful because of an error.</mark>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="flag_name" type="string" description="Flag name" />
                </@parms>

                <h5>Example</h5>
                <@codeblock>
                    var edo = new Enhanced_Data_Object();
                    //
                    edo.add_flag("test");
                    //
                    jsgui.stringify(edo.get('flags'))  ==>  'Collection("test")'
                    //
                    edo.add_flag("test");
                    //
                    jsgui.stringify(edo.get('flags'))  ==>  'Collection("test", "test")'
                </@codeblock>

            </@item>

            <!-----------------------------------------
            |   remove_flag(flag_name)
            ------------------------------------------>

            <@item title="remove_flag(flag_name)">
                <div class="description">
                    <p>
                        Probably should remove the flag <code>flag_name</code> from the object flags collection.
                        <mark>But it does not works.</mark>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="flag_name" type="string" description="Flag name" />
                </@parms>

                <h5>Example</h5>
                <@codeblock>
                    var edo = new Enhanced_Data_Object();
                    //
                    edo.add_flag("test");
                    //
                    jsgui.stringify(edo.get('flags'))  ==>  'Collection("test")'
                    //
                    edo.remove_flag("test");
                    //
                    jsgui.stringify(edo.get('flags'))  ==>  'Collection("test")'
                </@codeblock>

            </@item>

            <!-----------------------------------------
            |   has_flag(flag_name)
            ------------------------------------------>

            <@item title="has_flag(flag_name)">
                <div class="description">
                    <p>
                        Probably should check if the flag <code>flag_name</code> is added to the object flags collection, and return <code>true</code> or <code>false</code>.
                        <mark>But it always return <code>undefined</code>.</mark>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="flag_name" type="string" description="Flag name" />
                </@parms>

                <h5>Example</h5>
                <@codeblock>
                    var edo = new Enhanced_Data_Object();
                    //
                    edo.has_flag("test")  ==>  undefined
                    //
                    edo.add_flag("test");
                    //
                    edo.has_flag("test")  ==>  undefined
                </@codeblock>

            </@item>


            <!-----------------------------------------
            -------------------------------------------
            |   get()
            -------------------------------------------
            ------------------------------------------>

            <@overloads title="get()">

                <!-----------------------------------------
                |   get()
                ------------------------------------------>

                <@item title="get()">
                    <div class="description">
                        <p>
                            Just returns an internal storage object containing the field values (<em>exactly as Data_Object</em>).
                        </p>
                    </div>

                    <h5>Example</h5>
                    <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:get() should return an object with all values" />
                </@item>

                <!-----------------------------------------
                |   get(field_name)
                ------------------------------------------>

                <@item title="get(field_name)">
                    <div class="description">
                        <p>
                            Returns a field value for the <code>field_name</code>.
                        </p>
                        
                        <h5>Parameters:</h5>
                        <@parms>
                            <@parm name="field_name" type="string" description="Field name" />
                        </@parms>
                                                       
                        <p>
                            The main get(field_name) algorithm is the following:
                            <@codeblock>
                                function get(field_name) {
                                    if (field_name.indexOf('.') > -1) return processQualifiedName();
                                    //
                                    if (!fc.get(field_name)) {
                                        // field_name field was not defined:
                                        var res = ll_get(_, field_name);
                                        return res;
                                    } else {
                                        // field_name field was defined:
                                        if (!_[field_name]) {
                                            _[field_name] = createValueBasedOnFieldDefinition(); // Data_Object or Data_Value usually
                                            return _[field_name];
                                        } else {
                                            return _[field_name];
                                        }
                                    }
                                }
                            </@codeblock>
                        </p>

                        <h5 class="content-part-header collapsed">processQualifiedName()</h5>

                        <p >
                            If <code>field_name</code> is a qualified name (i.e. contains several names delimited by dot characters, like "a.b.c"), then
                            it applies the get() method to all the names from the chain, and returns the result:
                        </p>

                        <@codeblock>
                            data_object.get("a.b.c") === data_object.get("a").get("b").get("c")
                        </@codeblock>

                        <p>
                           There is a <strong><em>small difference</em></strong> between <code>Data_Object</code> and <code>Enhanced_Data_Object</code> 
                           when an intermediate object not exists: <code>Data_Object</code> returns <code>undefined</code>, 
                           but <code>Enhanced_Data_Object</code> throws an exception.
                        </p>
                        <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:get/set should process qualified names" />
                        
                        
                        <h5 class="content-part-header collapsed">field_name field was not defined</h5>
                        
                        <p>
                            <strong><em>The following behaviour is exactly the same as for <code>Data_Object</code>:</em></strong>
                        </p>
                        <p>
                            If the <code>field_name</code> field was not defined for this Data_Object, then it tries to get an appropriate value
                            from an internal data object (the <code>_</code> property). By the way, it uses the
                            <a href="@link:/core/jsgui-lang-essentials.js.html#ll_get">ll_get()</a> method call internally to get the value, but <a href="@link:/core/jsgui-lang-essentials.js.html#ll_get">ll_get()</a> power seems
                            not used here. Moreover, the pair <a href="@link:/core/jsgui-lang-essentials.js.html#ll_set">ll_set()</a> method is not used in the Data_Object.set() method. So, <code>ll_get(_, field_name)</code> call
                            works like <code>_[field_name]</code> here.
                        </p>

                        <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:set() without field definition: doc example 1" />

                        <p>
                            <strong><em>The following behaviour differs from <code>Data_Object</code> one:</em></strong>
                        </p>
                        <p>
                            If the field value was not found (more precisely: if the <a href="@link:/core/jsgui-lang-essentials.js.html#ll_get">ll_get()</a> call returned
                            something evaluated to <code>false</code>), then it returns <code>undefined</code>.
                        </p>

                        <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:set() without field definition: doc example 2" />

                        <h5 class="content-part-header collapsed">field_name field was defined</h5>

                        <div>
                            
                        <p>
                            If the <code>field_name</code> field was defined, then <code>get()</code> just returns the field value. But if the field value was not set previously
                            (more precisely: if <code>_[field_name]</code> evaluates to <code>false</code>), then it tries to create the value first.
                        </p>

                        <p>
                            The field definition can be done using many different object formats, and the creating value depends of the format first of all. The code
                            processing the formats and creating the value is placed directly into the get() method.
                        </p>
                        <p>
                            The get() method selects a code branch to create the value depending of the internal format signature. Meanwhile it will be described here
                            using the signatures too.
                        </p>


                        <p class="content-part-header collapsed"><strong>[s,s,f]</strong></p>
                        
                        <div>
                                
                        <p>
                            The [s,s,f] format parts are [field_name, fieldStrType, fieldDef]<br /><br />
                            <strong><em><code>Data_Object</code> processes this format, but <code>Enhanced_Data_Object</code> does not. The field values still be not set.</em></strong>
                        </p>

                        <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:get() before set(): [s,s,f]" />

                        </div>
                            
                       <p class="content-part-header collapsed"><strong>[s,[s,u]]</strong></p>

                        <p>
                            Should throw an error, but I see no way to define a field using this format to test it.
                        </p>
                    
                        <p class="content-part-header collapsed"><strong>[s,s,o]</strong></p>
                            
                        <div>
                            
                        <p>
                            The [s,s,o] format parts are [field_name, field_type_name, field_info]<br /><br />
                            Depending of the field_type_name part, the resulting values will be following:
                            <ul>
                                <li>
                                    <strong><code>'collection'</code></strong>: <code>new Collection({'context': this._context});</code>
                                </li>
                                <li>
                                    <strong><code>'ordered_string_list'</code></strong>: error (<code>throw 'stop';</code>)
                                </li>
                                <li>
                                    <strong><code>'string'</code></strong>: <code>new Data_Value({'context': this._context}); if (field_info.default) result.set(field_info.default); result.parent(this);</code>
                                </li>
                                <li>
                                    <strong>other</strong>: see below
                                </li>
                            </ul>                       
                        </p>
                               
                        <p>
                            In other cases calculates a constructor using the <code>ensure_data_type_data_object_constructor()</code> method, 
                            then creates the value, passing the context (if any), ensures <code>.__type_name</code>, sets default value (if any), 
                            and sets parent.
                        </p>

                        <p>
                            <mark><strong><em>Data_Object differences:</em></strong></mark>
                            <ul>
                                <li>
                                    <strong><code>'collection'</code></strong>: Enhanced_Data_Object works, Data_Object fails.
                                </li>
                                <li>
                                    <strong><code>'ordered_string_list'</code></strong>: Data_Object works, Enhanced_Data_Object fails.
                                </li>
                                <li>
                                    <strong>other</strong>: see below
                                </li>
                            </ul>                       
                        </p>
                            
                        <p>
                            For "other" case Data_Object processes <code>field_info.data_type</code>, and creates <code>Data_Value</code> 
                            for <code>["text",length]</code> and <code>["int"]</code> data types. Enhanced_Data_Object does not process <code>field_info.data_type</code>.
                        </p>
                        <p>
                           If the value was not created at the previous step, then they both use <code>ensure_data_type_data_object_constructor()</code> function to get an object constructor, 
                           and create the value object. In contrast to Data_Object, Enhanced_Data_Object can call the constructor 
                           without the <code>context</code> spec passing (if its own context not set). Also, Enhanced_Data_Object processes 
                           <code>field_info.default</code> default value (calls <code>field_val.set(default_value)</code> if present).
                        </p>
                                
                        <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:get() before set(): [s,s,o]" />

                        </div>
                            
                        <p class="content-part-header collapsed"><strong>[s,s]</strong></p>

                        <div>
                            
                        <p>                           
                            The [s,s] format parts are [field_name, field_type_name]<br /><br />
                        
                            Depending of the field_type_name part, the resulting values will be following:
                            <ul>
                                <li>
                                    <strong><code>'collection'</code></strong>: new Collection(...)
                                </li>
                                <li>
                                    <strong><code>'control'</code></strong>: return undefined
                                </li>
                                <li>
                                    <strong><code>'string'</code></strong>: new Data_Value(...)
                                </li>
                                <li>
                                    <strong>other</strong>: return undefined
                                </li>
                            </ul>                       
                        </p>

                        <p>
                            <mark><strong><em>Data_Object differences:</em></strong></mark>
                        </p>
                        <p>
                            Everything is different. No common results found here.
                        </p>
                            
                        <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:get() before set(): [s,s]" />

                        </div>
                            
                        <p class="content-part-header collapsed"><strong>[s,[s,s]]</strong></p>
                            
                        <div>
                        <p>                           
                            The [s,[s,s]] format parts are [field_name, [data_type_name, collection_type_name]]
                        </p>
                        <p>
                            If the <code>data_type_name === 'collection'</code>, then creates new Collection object. The <code>collection_type_name</code> is not used.
                        </p>
                        <p>
                            There is no way to set <code>data_type_name</code> to value other than <code>'collection'</code> (because of the 
                            <a href="@link:/core/data-object-fields-collection.js/Fields_Collection.html#set__array">Fields_Collection.set()</a> method behaviour).
                        </p>
                        <h6>Data_Object differences:</h6>
                        <p>
                            Data_Object does not process this format (returns <code>undefined</code>).
                        </p>

                        <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:get() before set(): [s,[s,s]]" />
                        
                        </div>

                            
                        <p class="content-part-header collapsed"><strong>[s,[s,o]]</strong></p>
                            
                        <div>
                        <p>                           
                            The [s,[s,o]] format parts are [field_name, [data_type_name, objDef]]                           
                        </p>
                        <p>
                            If the <code>data_type_name === 'collection'</code>, then creates new Collection object, and calls <code>fields()</code> method 
                            passing <code>objDef</code> fields definition.
                        </p>
                        <p>
                            If <code>data_type_name !== 'collection'</code>, then returns <code>undefined</code>.
                        </p>
                        <h6>Data_Object differences:</h6>
                        <p>
                            Data_Object does not process this format (throws an exception or returns <code>undefined</code>).
                        </p>

                        <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:get() before set(): [s,[s,o]]" />
                            
                        </div>
                            
                        </div>
                            
                    </div>

                </@item>

            </@overloads>

            
            <!-----------------------------------------
            |   extend(prop, namespcExtension, propsToMerge)
            ------------------------------------------>

            <@item title="static extend(prop, namespcExtension, propsToMerge)">
                <div class="description">
                    <p>
                        Just calls a <a href="@link:/core/data-object.js/Data_Object.html#extend__prop_post_init">Data_Object.extend()</a> method passing the parameters.
                    </p>
                    <p>
                        If the <code>prop</code> parameter contains a <code>.flags</code> field, then sets <code>._flags</code> field for the resulting class. <mark>This field is not used anywhere.</mark>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="prop" type="string" description="see Data_Object.extend()" />
                    <@parm name="namespcExtension" type="string" description="not used" />
                    <@parm name="propsToMerge" type="string" description="not used" />
                </@parms>

                <@codeblock src="/z_core/data-object/Enhanced_Data_Object.spec.js:extend() doc example" />
            </@item>
            
            <!-----------------------------------------
            |          Side effects
            ------------------------------------------>

            <@item title="Side effects" class="remark">

                <@codeblock>
                    jsgui.ensure_data_type_data_object_constructor = ensure_data_type_data_object_constructor;
                    // (differs from Data_Object.ensure_data_type_data_object_constructor: uses Enhanced_Data_Object instead of Data_Object)
                    //
                    Data_Object.set_Enhanced_Data_Object(Enhanced_Data_Object);
                    //
                    // Enhanced_Data_Object.register_data_type() changes jsgui.data_types_info[]
                    //
                    // ensure_data_type_data_object_constructor() changes jsgui.map_data_type_data_object_constructors[]
                </@codeblock>

                <p>
                    <code>require('core/enhanced-data-object')</code> call produces <code>String.abstract = true;</code> side effect because it calls 
                    <code>Collection(String)</code> in the module code. 
                    See <a href="@link:/core/data-object.js/Data_Object.html#extend_side_effect">Data_Object.extend() side effect</a>
                    for an additional info.
                </p>

                <@codeblock src="/z_core/side-effects/collection_string.spec.js:test require(enhanced-data-object)" />
            </@item>


        </@section>

    </article>

</section>


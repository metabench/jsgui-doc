
<h1 class="page-title">Class: Data_Object</h1>

<section>

    <!--==================================================
    =                   Overview
    ===================================================-->

    <header>
        <h2>
            <span class="ancestors"><a href="@link:/core/data-object.js.html">core/data-object.js</a>.</span>
            Data_Object
        </h2>

        <div class="container-overview">
            <div class="class-description">
                <p>
                    Represents a class storing a data object.                    
                </p>
            </div>
            <p>Base class: <span class="ancestors"><a href="@link:/core/evented-class.js/Evented_Class.html">core/evented-class.js:Evented_Class</a></span></p>
        </div>
    </header>

    <article>

        <!--==================================================
        =                   Creation
        ===================================================-->

        <@section title="Creation">
               
            <@item title="new Data_Object(spec-opt)" >
                <div class="description">
                    <p>Creates the Data_Object object.</p>
                </div>

                <h5>new abstract Data_Object</h5>

                <p>
                    If <code>spec.abstract === true</code>, then creates an abstract data object. In this case, all the initialization consists of the following:

                    <@codeblock>
                        this._abstract = true;
                        var tSpec = tof(spec);
                        if (tSpec == 'function') {
                            this._type_constructor = spec;
                        }
                        if (tSpec == 'object') {
                            this._spec = spec;
                        }
                    </@codeblock>

                </p>

                <h5>new real Data_Object</h5>

                <ul>
                    <li>sets &nbsp; <code class="prettyprint">this.__type = 'data_object';</code></li>
                    <li>sets &nbsp; <code class="prettyprint">this.__type_name = 'data_object';</code></li>
                    <li>sets &nbsp; <code class="prettyprint">this._ = {};</code></li>
                    <li>tries to set &nbsp; <code class="prettyprint">this._context</code> and <code class="prettyprint">this.__id</code> from the <code>spec</code></li>
                    <li>if <code>spec</code> is Data_Object in turn, then set own values from the spec values</li>
                    <li>calls methods listed in <code>spec</code>, for example: <code>spec === {load_arr: [1,2,3]}</code> will call <code>this.load_arr([1,2,3])</code> if the <code>load_arr()</code> method exists.</li>
                    <li>processes <a href="#feature-chained-fields">chained fields</a> and <a href="#feature-fields-connection">fields connection</a></li>
                    <li>intended to process <code class="prettyprint">spec.event_bindings</code>, but this is prohibited now (throws an exception)</li>
                    <li>if <code class="prettyprint">spec.constraint</code>, then calls <code class="prettyprint">that.constraint(spec.constraint);</code></li>
                    <li>if <code class="prettyprint">spec.parent</code>, then calls <code class="prettyprint">this.set('parent', spec.parent);</code></li>
                </ul>
                
                <h5>Example</h5>               
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:no spec or empty spec" />
                
            </@item>

            <!-----------------------------------------
            |          init_default_events()
            ------------------------------------------>

            <@item title="init_default_events()">
                <div class="description">
                    <p>
                        Does nothing. 
                    </p>
                    <p>
                        Called from Data_Object constructor (i.e. from <code>init(spec)</code> method).
                    </p>
                </div>
            </@item>

            <!-----------------------------------------
            |          dobj(obj, data_def)
            ------------------------------------------>

            <@item title="static dobj(obj-opt, data_def-opt)" >
                <div class="description">
                    <p>
                        Creates and returns a new <code>Data_Object</code> instance (or <code>Enhanced_Data_Object</code> instance, if <a href="#set_enhanced_data_object__edo">set_Enhanced_Data_Object()</a> was called previously).
                    </p>
                    <p>
                        If the <code>opt</code> parameter is passed, then it is used as name/value pairs object to initialize field values.
                    </p>
                    <p>
                        <mark>The <code>data_def</code> parameter is not used in fact.</mark>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="obj" type="object" description="Fields initialization object" optional />
                    <@parm name="data_def" type="?" description="Not used in fact" optional />
                </@parms>

                <h5>Example</h5>               
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:dobj() - doc example" />

            </@item>

            <!-----------------------------------------
            |          extend(prop, post_init)
            ------------------------------------------>

            <@item title="static extend(prop, post_init)">
                <div class="description">
                    <p>
                        Creates a derived class. In general, the base class is extended by the properties and methods specified in the <code>prop</code> parameter.
                    </p>
                    <p>
                        <mark>The <code>post_init</code> parameter is not used now (was used as a post init function in the past).</mark>
                    </p>
                </div>

                    <h5>Parameters:</h5>
                    <@parms>
                        <@parm name="prop" type="string/object" description="see below" />
                        <@parm name="post_init" type="function" description="not used" />
                    </@parms>

                    <div>
                        <h5 class="content-part-header collapsed">prop as string</h5>

                        <p>
                            If the <code>prop</code> parameter type is string, then it is used as a data type name for the <code>jsgui.data_types_info</code> array.
                            The array seems as key/value pairs, where key is <code>data_type_name</code>, and value is <code>data_type_info</code>.                           
                        </p>
                        <p>
                            In this case the <code>prop</code> parameter will be <code>data_type_name</code>. It processes as follows:
                        </p>
                        <ul>
                            <li>
                                <code>class[data_type_name] = data_type_name;</code>
                            </li>
                            <li>
                                <code>class[data_type_info] = data_type_info;</code>
                            </li>
                            <li>
                                <code>obj['__type_name'] = data_type_name;</code>
                            </li>
                            <li>
                                <code>obj['__data_type_info'] = data_type_info;</code>
                            </li>
                        </ul>
                        <p>
                            where <code>class</code> is the derived class, and <code>obj</code> is the derived class object instance prototype.
                        </p>
                        <p>
                            <mark>By the way, the <code>obj['__type_name']</code> will be changed to <code>'data_object'</code> in the constructor code anyway.</mark>
                        </p>
                        <p>
                            <mark>
                                It seems strange to assign property values equals to property names: <code>class[data_type_name] = data_type_name;</code>,
                                <code>class[data_type_info] = data_type_info;</code>. Also, probably the <code>data_type_info</code> 
                                can be a non-identifier string (e.g. <code>"text(10)"</code>) or object (e.g. <code>{ Field1: "int", Field2: "number" }</code> ). 
                                In the last case it will be funny to access the <code>data_type_info</code> value: <br/>
                                class[{ Field1: "int", Field2: "number" }] == { Field1: "int", Field2: "number" } <br/>
                                class[{}] == { Field1: "int", Field2: "number" } <br/>
                                class["[object Object]"] == { Field1: "int", Field2: "number" } <br/>
                        </mark>
                        </p>

                        <!--h5>Example:</h5-->
                        <!--@codeblock>
                            jsgui.data_types_info["depth"] = "int";
                            //
                            var Data_Object_Ex = Data_Object.extend("depth");
                            //
                            // Data_Object_Ex.depth === "depth"
                            // Data_Object_Ex.int === "int"
                            // Data_Object_Ex["int"] === "int"
                            //
                            var data_object = new Data_Object_Ex();
                            //
                            // data_object.__type_name === "depth"
                            // data_object.__data_type_info === "int"
                        </@codeblock-->

                        <h5>Example: data type info as string</h5>
                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:use jsgui.data_types_info[]: data type info as string" />                        
                        
                        <h5>Example: data type info as object</h5>
                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:use jsgui.data_types_info[]: data type info as object" />                        
                        
                    </div>
                    
                    <div>
                        <h5 class="content-part-header collapsed">prop as object</h5>

                        <p>
                            If the <code>prop</code> parameter type is an object, then it extends the base class by adding/replacing properties an methods
                            from the <code>prop</code> object.
                        </p>
                        <p>
                            Replaced methods can use <code>this._super()</code> calls to perform the base method call.
                        </p>
                        
                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:usual class extension" />
                        
                        <div>
                        <h6 class="content-part-header collapsed">for_class</h6>
                        
                        <p>
                            Some property names have a special meaning, and applies to the class itself instead of the object instances. 
                            This processing named 'for_class' feature:
                        </p>
                            
                        <ul>
                            <li>
                                <code>'class_name'</code> - sets <code>class._class_name</code> property
                            </li>
                            <li>
                                <code>'fields'</code> - sets <code>class._fields</code> property
                            </li>
                            <li>
                                <code>'connect_fields'</code> - sets <code>class._connect_fields</code> property
                            </li>
                        </ul>
                        <p>
                            The 'for_class' processing described above applies only when the property value is of <code>object</code> or <code>boolean</code> type.
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:for_class feature" />
                            
                        </div>
                        
                        <div>
                        <h6 class="content-part-header collapsed">#name</h6>
                        
                        <p>
                            If the property name starts from <code>'#'</code> character, then it gets an initial value from other property (referred by the property value).
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:#name feature: 1 level" />
                            
                        </div>
                        
                        <div>
                        <h6 class="content-part-header collapsed">post_init</h6>
                            
                        <p>
                            If <code>prop</code> object contains a <code>post_init</code> method, then the method is called 
                            when an usual object initialization is completed.
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:post_init feature" />
                            
                        </div>
                    
                    </div>
                    
            </@item>

            <!-----------------------------------------
            |          ensure_data_type_data_object_constructor(data_type_name)
            ------------------------------------------>

            <@item title="static ensure_data_type_data_object_constructor(data_type_name)">
                <div class="description">
                    <p>
                        Returns a Data_Object constructor intended to create data objects for the <code>data_type_name</code>.
                    </p>
                    <p>
                        If the constructor was not created previously, then it creates here. <code>jsgui.data_types_info[data_type_name]</code> is used for the fields description.
                    </p>
                    <p>
                        The created constructors are cached in the <a href="#map_data_type_data_object_constructors">map_data_type_data_object_constructors</a> array.
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="data_type_name" type="string" description="Data type name" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:ensure_data_type_data_object_constructor()" />
            </@item>
        
            <!-----------------------------------------
            |          map_data_type_data_object_constructors
            ------------------------------------------>

            <@item title="static map_data_type_data_object_constructors">
                <div class="description">
                    <p>
                        Name/value array containing predefined constructors for data type names. 
                        It is created by the following module initialization code (so it refers to the jsgui's array):
                    </p>
                    <p>
                        <code>Data_Object.map_data_type_data_object_constructors = jsgui.map_data_type_data_object_constructors;</code>
                    </p>
                    <p>
                        Constructors created by <a href="#ensure_data_type_data_object_constructor__data_type_name">ensure_data_type_data_object_constructor(data_type_name)</a> function 
                        are added to the array automatically (inside the function call).
                    </p>
                </div>

                <@codeblock src="/z_core/data-object/Data_Object.spec.js:map_data_type_data_object_constructors" />
            </@item>

        </@section>

        <!--==================================================
        =                   Context
        ===================================================-->

        <@section title="Context">

            <@item title="Remarks" class="remark">
                <p>
                    <mark>parent() and other methods (_fp_parent(), position_within(), and remove_from()) use different implementation private variables.</mark>
                </p>
            </@item>
            
            <!-----------------------------------------
            |          _id()
            ------------------------------------------>

            <@item title="_id()">
                <div class="description">
                    <p>(just like Data_Value._id())</p>
                    <p>Returns an object id.</p>
                    <p>
                        The id is assigned by the context.new_id() method when the _id() is called for the first time.
                        If the context was not set, then _id() throws an exception.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:_id() doc example" />

            </@item>

            <!-----------------------------------------
            |          parent(obj, index)
            ------------------------------------------>

            <@item title="parent(obj-opt, index-opt)">
                <div class="description">
                    <p>(just like Data_Value.parent())</p>
                    <p>When called without arguments: returns the current parent.</p>
                    <p>
                        When called with <code>obj</code> argument: sets the <code>obj</code> as a parent.<br />
                        If the context was not set, then tries to set its context to the parent context (so, will be able to use the _id() method further).
                    </p>
                    <p>
                        When called with <code>index</code> argument too: also sets an (internal) <code>_index</code> field.
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="obj" type="Object" description="New parent object" optional />
                    <@parm name="index" type="Number" description="An index within the parent?" optional />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:parent()" />

            </@item>

            <!-----------------------------------------
            |          _fp_parent()
            ------------------------------------------>

            <@item title="_fp_parent()">
                <div class="description">
                    <p>It seems that this method was intended for some relationship feature with multi-parents capability. But it looks not completed yet.</p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:_fp_parent()" />
            </@item>

            <!-----------------------------------------
            |   position_within(parent)
            ------------------------------------------>

            <@item title="position_within(parent)">
                <div class="description">
                    <p>
                        Returns the Data_Object position as a child of the <code>parent</code> object.
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="parent" type="An object with _id() method" description="Parent object" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:position_within()" />

            </@item>

            <!-----------------------------------------
            |   remove_from(parent)
            ------------------------------------------>

            <@item title="remove_from(parent)">
                <div class="description">
                    <p>
                        Probably should remove the Data_Object from the parent, but <mark>throws an exception instead</mark> (attempt to use a non-existing "_arr" field of the parent).
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="parent" type="An object with _id() method" description="Parent object" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:remove_from()" />
            </@item>

            <!-----------------------------------------
            |          Mini_Context
            ------------------------------------------>

            <@item title="static Mini_Context">
                <div class="description">
                    <p>
                        Just a reference to <a href="@link:/core/data-object.js/Mini_Context.html">Mini_Context</a> class.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:Mini_Context" />
            </@item>
        
        </@section>

        <!--==================================================
        =                   Fields
        ===================================================-->

        <@section title="Fields">

            <!-----------------------------------------
            |   set_field(...)
            ------------------------------------------>

            <@item title="set_field(...)">
                <div class="description">
                    <p>
                        Adds a field description to the Data_Object.
                        Please see <a href="@link:/core/data-object-fields-collection.js/Fields_Collection.html#set_parms">Fields_Collection.set()</a> for the parameters explanation.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:field(), set_field()" />

            </@item>

            <!-----------------------------------------
            |          field()
            ------------------------------------------>

            <@overloads title="field()">
    
            <@item title="field()">
                <div class="description">
                    <p>Returns an array containing fields definition.</p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:field()" />

            </@item>

            <!-----------------------------------------
            |          field(field_name)
            ------------------------------------------>

            <@item title="field(field_name)">
                <div class="description">
                    <p>
                        Returns a field definition for the field specified by <code>field_name</code>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="field_name" type="string" description="Field name" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:field(field_name)" />

            </@item>

            <!-----------------------------------------
            |          field(obj)
            ------------------------------------------>

            <@item title="field(obj)">
                <div class="description">
                    <p>
                        Sets fields (calling <a href="#set_field">set_field()</a> method) for each key/value pair from the passed <code>obj</code>.
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="obj" type="object" description="Fields definition object" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:field(obj)" />

            </@item>

            </@overloads>
            
            <!-----------------------------------------
            |   read_only(field_name)
            ------------------------------------------>

            <@overloads title="read_only()">
    
            <@item title="read_only(field_name)">
                <div class="description">
                    <p>Marks the specified field as read-only.</p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="field_name" type="string" description="Field name" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:read_only(field_name) - doc example" />
            </@item>

            <!-----------------------------------------
            |   read_only(field_name, value)
            ------------------------------------------>

            <@item title="read_only(field_name, value)">
                <div class="description">
                    <p>Enables/disables a read-only mode for the specified field.</p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="field_name" type="string" description="Field name" />
                    <@parm name="value" type="bool" description="read-only mode" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:read_only(field_name, value) - doc example" />
            </@item>

            </@overloads>
            
            <!-----------------------------------------
            |          Fields_Collection
            ------------------------------------------>

            <@item title="static Fields_Collection">
                <div class="description">
                    <p>
                        Just a reference to <a href="@link:/core/data-object-fields-collection.js/Fields_Collection.html">Fields_Collection</a> class.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:Fields_Collection" />
            </@item>
    
            <!-----------------------------------------
            |          parse_field_text(field_text)
            ------------------------------------------>

            <@item title="static parse_field_text(field_text)">
                <div class="description">
                    <p>
                        Just a reference to <a href="@link:/core/data-object-fields-collection.js/Fields_Collection.html#parse_field_text">Fields_Collection.parse_field_text()</a> function.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:parse_field_text(field_text)" />
            </@item>
        
        </@section>

        <!--==================================================
        =                   Values
        ===================================================-->

        <@section title="Values">

            <!-----------------------------------------
            |   value()
            ------------------------------------------>

            <@item title="value()">
                <div class="description">
                    <p>
                        Returns a name/value object for the Data_Object values.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:value()" />
            </@item>

            <!-----------------------------------------
            -------------------------------------------
            |   get()
            -------------------------------------------
            ------------------------------------------>

            <@overloads title="get()">

                <!-----------------------------------------
                |   get()
                ------------------------------------------>

                <@item title="get()">
                    <div class="description">
                        <p>
                            Just returns an internal storage object containing the field values: <code>return this._;</code>
                        </p>
                        <p>
                            But if <code>this.__type_name</code> is set, then processes the storage object by output processor: 
                            <code>return jsgui.output_processors[this.__type_name](this._);</code> 
                        </p>
                    </div>

                    <h5>Example</h5>
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:get() should return an object with all values" />
                
                    <h5>output_processors example</h5>
                    <div>
                        <p>
                            <mark>It looks like input/output processors are not working properly...</mark>
                        </p>
                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:should use input_processors and output_processors" />
                    </div>               
                
                </@item>

                <!-----------------------------------------
                |   get(field_name)
                ------------------------------------------>

                <@item title="get(field_name)">
                    <div class="description">
                        <p>
                            Returns a field value for the <code>field_name</code> field.
                        </p>
                        
                        <h5>Parameters:</h5>
                        <@parms>
                            <@parm name="field_name" type="string" description="Field name" />
                        </@parms>
                                                       
                        <p>
                            The main get(field_name) algorithm is the following:
                            <@codeblock>
                                function get(field_name) {
                                    if (field_name.indexOf('.') > -1) return processQualifiedName();
                                    //
                                    if (!fc.get(field_name)) {
                                        // field_name field was not defined:
                                        var res = ll_get(_, field_name);
                                        if (res) return res;
                                        return this[field_name];
                                    } else {
                                        // field_name field was defined:
                                        if (!_[field_name]) {
                                            _[field_name] = createValueBasedOnFieldDefinition(); // Data_Object or Data_Value usually
                                            return _[field_name];
                                        } else {
                                            return _[field_name];
                                        }
                                    }
                                }
                            </@codeblock>
                        </p>

                        <h5 class="content-part-header collapsed">processQualifiedName()</h5>

                        <p >
                            If <code>field_name</code> is a qualified name (i.e. contains several names delimited by dot characters, like "a.b.c"), then
                            it applies the get() method to all the names from the chain, and returns the result:
                        </p>

                        <@codeblock>
                            data_object.get("a.b.c") === data_object.get("a").get("b").get("c")
                        </@codeblock>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:get/set should process qualified names" />
                        
                        <h5 class="content-part-header collapsed">field_name field was not defined</h5>
                        
                        <p>
                            If the <code>field_name</code> field was not defined for this Data_Object, then it tries to get an appropriate value
                            from an internal data object (the <code>_</code> property). By the way, it uses the
                            <a href="@link:/core/jsgui-lang-essentials.js.html#ll_get">ll_get()</a> method call internally to get the value, but <a href="@link:/core/jsgui-lang-essentials.js.html#ll_get">ll_get()</a> power seems
                            not used here. Moreover, the pair <a href="@link:/core/jsgui-lang-essentials.js.html#ll_set">ll_set()</a> method is not used in the Data_Object.set() method. So, <code>ll_get(_, field_name)</code> call
                            works just like <code>_[field_name]</code> here.
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:set() without field definition: doc example 1" />

                        <p>
                            If the field value was not found (more precisely: if the <a href="@link:/core/jsgui-lang-essentials.js.html#ll_get">ll_get()</a> call returned
                            something evaluated to <code>false</code>), then it tries to get a <code>field_name</code> property of the Data_Object itself.
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:set() without field definition: doc example 2" />

                        <h5 class="content-part-header collapsed">field_name field was defined</h5>

                        <div>
                            
                        <p>
                            If the <code>field_name</code> field was defined, then <code>get()</code> just returns the field value. But if the field value was not set previously
                            (more precisely: if <code>_[field_name]</code> evaluates to <code>false</code>), then it tries to create the value first.
                        </p>

                        <p>
                            The field definition can be done using many different object formats, and the creating value depends of the format first of all. The code
                            processing the formats and creating the value is placed directly into the get() method.
                        </p>
                        <p>
                            The get() method selects a code branch to create the value depending of the internal format signature. Meanwhile it will be described here
                            using the signatures too.
                        </p>


                        <p class="content-part-header collapsed"><strong>[s,s,f]</strong></p>
                        
                        <p>
                            The [s,s,f] format parts are [field_name, fieldStrType, fieldDef]<br /><br />
                            For fieldDef equals to <code>String</code> and <code>Number</code> classes, creates a Data_Value object as the value. For other classes (when the fieldStrType =="Class") creates
                            the class instance as the value. A context spec passes to the Data_Value or class constructor in all cases, e.g <code>new Data_Value({ 'context': this._context })</code>.
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:get() before set(): [s,s,f]" />

                        <p class="content-part-header collapsed"><strong>[s,[s,u]]</strong></p>

                        <p>
                            Throws an error, but I see no way to define a field using this format.
                        </p>
                    
                        <p class="content-part-header collapsed"><strong>[s,s,o]</strong></p>
                            
                        <p>
                            The [s,s,o] format parts are [field_name, field_type_name, field_info]<br /><br />
                            Depending of the field_type_name part, the resulting values will be following:
                            <ul>
                                <li>
                                    <strong><code>'collection'</code></strong>: error (tries to create <code>new Collection({'context': this._context});</code>, but <code>jsgui.Collection</code> not defined)
                                </li>
                                <li>
                                    <strong><code>'data_object'</code></strong>: <code>new Data_Object({'context': this._context}); result.parent(this);</code>
                                </li>
                                <li>
                                    <strong><code>'ordered_string_list'</code></strong>: <code>new Ordered_String_List();</code>
                                </li>
                                <li>
                                    <strong><code>'string'</code></strong>: <code>new Data_Value({'context': this._context});</code>
                                </li>
                                <li>
                                    <strong>other</strong>: see below
                                </li>
                            </ul>                       
                        </p>

                        <p>
                            If <code>field_info.data_type</code> is <code>["text", length]</code> then creates <code>new Data_Value({'context': this._context});</code><br />
                        </p>
                        <p>
                            If <code>field_info.data_type</code> is <code>["int"]</code> then creates <code>new Data_Value({'context': this._context});</code><br />
                        </p>
                        <p>
                            In other cases calculates a constructor using the <code>ensure_data_type_data_object_constructor()</code> method, then creates the value:<br />
                            <code>result = new constructor({'context': this._context}); result.parent(this);</code>
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:get() before set(): [s,s,o]" />

                        <p class="content-part-header collapsed"><strong>[s,s]</strong></p>
                            
                        <p>                           
                            The [s,s] format parts are [field_name, field_type_name]<br /><br />
                        
                            Depending of the field_type_name part, the resulting values will be following:
                            <ul>
                                <li>
                                    <strong><code>'collection'</code></strong>: <code>throw 'not supported here. should use code in enhanced-data-object.';</code>
                                </li>
                                <li>
                                    <strong><code>'data_object'</code></strong>: <code>throw 'jsgui.Data_Object is not a function'</code>
                                </li>
                                <li>
                                    <strong>other</strong>: <code>new ensure_data_type_data_object_constructor(field_type_name)({'context': this._context}).parent(this);</code>
                                </li>
                            </ul>                       
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:get() before set(): [s,s]" />

                        <p class="content-part-header collapsed"><strong>[s,[s,s]]</strong></p>
                            
                        <p>                           
                            The [s,[s,s]] format parts are [field_name, field_info]<br /><br />
                            
                            <mark>Returns <code>undefined</code>.</mark>
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:get() before set(): [s,[s,s]]" />

                        <p class="content-part-header collapsed"><strong>[s,[s,o]]</strong></p>
                            
                        <p>                           
                            The [s,[s,o]] format parts are [field_name, [data_type_name, objDef]]<br /><br />
                            
                            If <code>data_type_name == 'collection'</code> throws <code>'not supported here. should use code in enhanced-data-object.'</code><br />
                            In other cases <mark>returns <code>undefined</code></mark>.
                        </p>

                        <@codeblock src="/z_core/data-object/Data_Object.spec.js:get() before set(): [s,[s,o]]" />
                            
                        </div>
                            
                    </div>

                </@item>

            </@overloads>

            <!-----------------------------------------
            -------------------------------------------
            |   set()
            -------------------------------------------
            ------------------------------------------>

            <@overloads title="set()">

                <div class="description">
                    <p>
                        If the Data_Object is abstract (<code>this._abstract == true</code>), then returns <code>false</code> without any other processing.
                    </p>
                </div>


                <!-----------------------------------------
                |   set(Data_Object)
                ------------------------------------------>

                <@item title="set(Data_Object)">
                    <div class="description">
                        <p>
                            Tries to set <code>this._[property_name] = value;</code> <mark>but <code>property_name</code> is undefined here</mark>.
                        </p>
                        <p>
                            Returns the passed value.
                        </p>
                    </div>

                    <h5>Parameters:</h5>
                    <@parms>
                        <@parm name="value" type="Data_Object" description="value to set" />
                    </@parms>
                    
                    <h5>Example</h5>
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:set() using Data_Object instead of name/value pairs" />
                </@item>

                <!-----------------------------------------
                |   set(obj)
                ------------------------------------------>

                <@item title="set(obj)">
                    <div class="description">
                        <p>
                            Enumerates the name/value pairs of the passed object, calling set(name, value) for each pair.
                        </p>
                        <p>
                            Returns an object made from the called set() results (the <code>obj</code> copy in fact).
                        </p>
                    </div>

                    <h5>Parameters:</h5>
                    <@parms>
                        <@parm name="obj" type="object" description="name/value pairs object" />
                    </@parms>

                    <h5>Example</h5>
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:set() using object of name/value pairs" />
                </@item>

                <!-----------------------------------------
                |   set(control)
                ------------------------------------------>

                <@item title="set(control)">
                    <div class="description">
                        <p>
                            Tries to set <code>this._[property_name] = value;</code> <mark>but <code>property_name</code> is undefined here</mark>.
                        </p>
                        <p>
                            Returns the passed value.
                        </p>
                        <p>
                            <mark>TODO: create an unit test and example</mark>
                        </p>
                    </div>

                    <h5>Parameters:</h5>
                    <@parms>
                        <@parm name="value" type="control" description="value to set" />
                    </@parms>
                    
                    <h5>Example</h5>
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:set() using control instead of name/value pairs" />
                </@item>

                <!-----------------------------------------
                |   set(field_name, value, event_prop-opt)
                ------------------------------------------>

                <@item title="set(field_name, value, event_prop-opt)">
                    <div class="description">
                        <p>
                            Sets the <code>field_name</code> field value to the <code>value</code>, raises a <code>change</code> event.
                        </p>
                        <p>
                            Returns <code>value</code>.
                        </p>
                    </div>

                    <h5>Parameters:</h5>
                    <@parms>
                        <@parm name="field_name" type="string" description="Field name" />
                        <@parm name="value" type="*" description="Value to set" />
                        <@parm name="event_prop" type="string, boolean, control" description="'change' event additions (see 'change event' below)" optional />
                    </@parms>
                    
                    
                    <h5 class="content-part-header collapsed">change event</h5>

                    <div>

                    <p>
                       By default, the event is raised for each <code>set(field_name, value)</code> call. The event argument is the following:
                    </p>

                    <@codeblock>
                        {
                            'name': field_name,
                            'value': value,
                            'target': the_data_object
                        };
                    </@codeblock>

                    <p>
                        If <code>field_name</code> is a qualified name, then a <code>'bubbled': true</code> property adds to the argument.
                    </p>
                        
                    <h5>Example</h5>
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:set and change value" />
                        
                        
                    <h6 class="content-part-header collapsed">silent</h6>
                        
                    <p>
                        If the <code>event_prop</code> type is 'string' or 'boolean', then it interpretes as a <code>silent</code> parameter. 
                        When the <code>silent</code> evaluates to <code>true</code>, the 'change' event is not raised.
                    </p>

                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:silent mode" />

                    <p>
                        <mark>
                            <code>silent === "false"</code> evaluates to <code>true</code>!                        
                        </mark>
                    </p>
                    
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:silent mode specified by string argument" />
                            
                    <h6 class="content-part-header collapsed">source</h6>
                        
                    <p>
                        If the <code>event_prop</code> type is 'control' (using the <a href="@link:/core/jsgui-lang-essentials.js.html#tof">tof()</a> function), then it interpretes as a <code>source</code> parameter. 
                        The <code>source</code> value adds to the 'change' event arguments.
                    </p>

                    <p>
                        <mark>TODO: create an unit test and example</mark>
                    </p>
                    
                    </div>                   
                    
                    <h5 class="content-part-header collapsed">read-only</h5>
                    
                    <p>
                        If the <code>field_name</code> field is read-only, then throws <code>'Property "' + property_name + '" is read-only.'</code>
                    </p>
                    
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:should prevent read-only fields from setting" />

                    <h5 class="content-part-header collapsed">Qualified name</h5>
                    
                    <p>
                        If the <code>field_name</code> contains a dot ("."), then it is interpreted as a qualified name. 
                        In this case it is assumed that all the intermediate names are data objects.
                    </p>

                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:get/set should process qualified names" />
                
                    <h5 class="content-part-header collapsed">Usual case</h5>

                    <p>
                        The main set() algorithm is the following:
                    </p>

                    <@codeblock>
                        function set(property_name, value) {
                            var data_value = get(property_name);
                            if (data_value){
                                data_value.set(value);
                            }
                            //
                            if (data_value === undefined){
                                if (value.__data_object || value.__data_value){
                                    this._[property_name] = value;
                                }else{
                                    this._[property_name] = new Data_Value({ 'value': value });
                                }
                                return value;                               
                            }else{
                                if (data_value is ('number', 'string', 'boolean', 'array'){
                                    // seems impossible !!!
                                    this._[property_name] = value;
                                    return value;
                                }else{
                                    this._[property_name] = data_value; // assigning the same again !!!
                                    return data_value; // not consistent with "return value" !!!
                                }
                            }
                        }
                    </@codeblock>

                    <p>
                        Now <code>Data_Object</code> keep values as <code>Data_Value</code> instances mainly. 
                        Also it can keep other <code>Data_Object</code>. In the past it was able to keep "pure" values (e.g. JavaScript native types), 
                        and the set() method can contain some obsolete code related to this capability.
                    </p>
                    <p>
                        The <code>set()</code> method calls the <code>get(field_name)</code> internally. The returned value is reffered here
                        as <code>data_value</code> (because it will be a <code>Data_Value</code> instance in most cases).
                    </p>
                    <p>
                        If the <code>data_value</code> is undefined, then it creates a <code>Data_Value</code> wrapper for the <code>value</code> argument, and sets it. 
                        But if the <code>value</code> argument is <code>Data_Object</code> or <code>Data_Value</code>, then it just sets it.
                    </p>
                    <p>
                       If the <code>data_value</code> is NOT undefined, then it calls <code>data_value.set(value);</code>
                        It works ok if the <code>value</code> argument is "pure" value, 
                        <mark>but it seems not consistent if the <code>value</code> argument is <code>Data_Object</code> or <code>Data_Value</code>
                        and sets twice or more.</mark>
                    </p>
                        
                    <p>
                        Returns the <code>value</code> argument (if the field is set for the first time), or the wrapping <code>data_value</code>
                        (if the field value was set previously, and changes now). <mark>Not consistent.</mark>
                    </p>

                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:should set and get field values" />
                </@item>

            </@overloads>

            <!-----------------------------------------
            |   has(field_name)
            ------------------------------------------>

            <@item title="has(field_name)">
                <div class="description">
                    <p>
                        Returns <code>true</code> if the <code>field_name</code> field was set.
                    </p>
                </div>
                
                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="field_name" type="string" description="Field name" />
                </@parms>
            
                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:has()" />

            </@item>
        
            <!-----------------------------------------
            |   load_from_spec(spec, arr_item_names)
            ------------------------------------------>

            <@item title="load_from_spec(spec, arr_item_names)">
                <div class="description">
                    <p>
                        Calls the <a href="#set">set()</a> method for the <code>spec</code> properties related to the field names from the <code>arr_item_names</code> array.
                    </p>
                    <p>
                        A field should be present in both <code>spec</code> object and <code>arr_item_names</code> array in order to be processed.
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="spec" type="object" description="Field values" />
                    <@parm name="arr_item_names" type="array of string" description="Field names" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:load_from_spec()" />
            </@item>

        </@section>
        
        <!--==================================================
        =                   Chained Fields
        ===================================================-->

        <@section title="Chained Fields">

            <@item title="Overview" class="overview" id="feature-chained-fields">
                <p>
                    The <strong>Chained Fields</strong> feature allows to pre-define fields at a class level.
                </p>
                <p>
                    The related methods (<code>get_chained_fields()</code> and <code>chained_fields_to_fields_list()</code>) are used in the constructor
                    code (inside the <code>init()</code> method). Probably the methods should be private, but they are published in the Data_Object class.
                </p>
                <p>
                    To use this feature you should add <code>fields</code> field to the <code>prop</code> parameter of the <a href="#extend__prop_post_init">Data_Object.extend()</a> method:
                </p>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:chained fields doc example 1 (object field def)" />
                
                <p>
                    The chained fields from base classes will be defined in the derived class as well.
                </p>
                <p>
                    The <code>fields</code> field of the <code>prop</code> parameter can be an object (like above), or an array. For example:
                </p>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:chained fields doc example 2 (array field def)" />
                
                <p>
                    The chained fields can be initialized in the derived class constructor call:
                </p>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:chained fields doc example 3 (set value in constructor)" />
            </@item>
            
            <!-----------------------------------------
            |   ___get_fields_chain()
            ------------------------------------------>

            <@item title="___get_fields_chain()">
                <div class="description">
                    <p>
                        Does nothing, returns <code>undefined</code>.
                    </p>
                </div>
            </@item>

            <!-----------------------------------------
            |   get_chained_fields(data_object_class)
            ------------------------------------------>

            <@item title="static get_chained_fields(data_object_class)">
                <div class="description">
                    <p>
                        Returns an array containing chained fields definitions defined for the <code>data_object_class</code> and parent classes.
                    </p>
                    <p>
                        The result array item format is <code>[item_number, [field_name, field_info]]</code>
                    </p>
                    <p>
                        <mark>The <code>item_number</code> values seems not consistent.</mark>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="data_object_class" type="class (Data_Object subclass)" description="class to inspect" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:get_chained_fields() - doc example" />
            </@item>

            <!-----------------------------------------
            |  chained_fields_to_fields_list(chained_fields)
            ------------------------------------------>

            <@item title="static chained_fields_to_fields_list(chained_fields)">
                <div class="description">
                    <p>
                        Converts the chained fields (e.g. <a href="#get_chained_fields__data_object_class">get_chained_fields()</a> output) to a fields array.
                    </p>
                    <p>
                        The result array item format is <code>[field_name, field_info]</code>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="chained_fields" type="array" description="chained fields array"  />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:chained_fields_to_fields_list() - doc example" />
            </@item>

        </@section>
        
        <!--==================================================
        =                   Fields connection
        ===================================================-->

        <@section title="Fields connection">

            <@item title="Overview" class="overview" id="feature-fields-connection">
                <p>
                    The <strong>Fields connection</strong> feature allows to get/set field values as the object properties.
                </p>
                <p>
                    E.g. <code>data_object.Field1 = 1;</code> instead of <code>data_object.set("Field1", 1);</code>
                </p>
                <p>
                    The feature can be activated for a derived class. In this case it will connect <a href="#feature-chained-fields">chained fields</a> 
                    defined for the derived class and base classes. For example:
                </p>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:connect_fields: doc example" />
            </@item>
            
            <!-----------------------------------------
            |          using_fields_connection()
            ------------------------------------------>
               
            <@item title="using_fields_connection()">
    
                <div class="description">
                    <p>
                        Returns the <strong>Fields connection</strong> feature active state. The feature is not active by default.
                        When a derived class is created from Data_Object, it can activate or deactivate the feature 
                        passing a <code>connect_fields</code> field to the <code>prop</code> parameter 
                        of the <a href="#extend__prop_post_init">Data_Object.extend()</a> method.
                    </p>
                    <p>
                        Activating/deactivating the feature does not affect the <a href="#connect_fields__">connect_fields()</a> method behaviour.
                    </p>
                    <p>
                        The <code>using_fields_connection()</code> method is called internally in the Data_Object initialization code, 
                        and probably is not intended for public use.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:using_fields_connection()" />
            </@item>
                        
            <!-----------------------------------------
            |          connect_fields(name)
            ------------------------------------------>

            <@overloads title="connect_fields()">
            
            <@item title="connect_fields(name)">

                <div class="description">
                    <p>Creates a method allowing to get/set a field with the same name.</p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="name" type="string" description="Field and method name" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:connect_fields(name): doc example" />

            </@item>

            <!-----------------------------------------
            |          connect_fields(array)
            ------------------------------------------>

            <@item title="connect_fields(array)">

                <div class="description">
                    <p>Calls <a href="#connect_fields__name">connect_fields(name)</a> for each array item.</p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:connect_fields(array): doc example" />
            </@item>

            <!-----------------------------------------
            |          connect_fields(obj)
            ------------------------------------------>

            <@item title="connect_fields(obj)">
                
                <div class="description">
                    <p><mark>Throws an exception when an object is passed as parameter.</mark></p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:connect_fields(obj): doc example" />
            </@item>
           
            </@overloads>
            

        </@section>

        <!--==================================================
        =                   Constraints
        ===================================================-->

        <@section title="Constraints">

            <@item title="Remarks" class="overview">
                <p>
                    This feature allows to define constraints for field values. But the constraints do not apply automatically for <a href="#set__">set()</a> method.
                </p>
                <p>
                    <mark>The feature seems not completed enough.</mark>
                </p>
            </@item>
            
            <!-----------------------------------------
            |          data_def()
            ------------------------------------------>

            <@item title="data_def()">
                <div class="description">
                    <p><mark>Does nothing.</mark></p>
                    <p>
                        Probably was intended to work with Data_Object_Def_Constraint.
                    </p>
                </div>
            </@item>
            
            <!-----------------------------------------
            |          constraints(field_constraints)
            ------------------------------------------>

            <@item title="constraints(field_constraints)">
                <div class="description">
                    <p>Sets field constraints to the passed value.</p>
                    <p><mark>constraints() without parameters seems intended to return the field constraints, but it returns undefined</mark></p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="field_constraints" type="object" description="Field constraints" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:constraints()" />

            </@item>

            <!-----------------------------------------
            |   matches_field_constraint(field_name, str_constraint)
            ------------------------------------------>

            <@item title="matches_field_constraint(field_name, str_constraint)">
                <div class="description">
                    <p>
                        Returns <code>true</code> if the value of the specified field matches the specified constraint.
                    </p>
                    <p>
                        <mark>In fact always returns false because of the Data_Value wrapping.</mark>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="field_name" type="string" description="Field name" />
                    <@parm name="str_constraint" type="string" description="Constraint definition" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:matches_field_constraint()" />
            </@item>

            <!-----------------------------------------
            |   obj_matches_field_constraints(data_object)
            ------------------------------------------>

            <@item title="obj_matches_field_constraints(data_object)">
                <div class="description">
                    <p>Checks other Data_Object to match constraints from this Data_Object.</p>
                    <p>
                        Calls <a href="#matches_field_constraints__data_object">matches_field_constraints(data_object)</a> for the other Data_Object internally.
                    </p>
                    <p>
                        <mark>Returns false instead of true because of the Data_Value wrapping</mark>
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="data_object" type="Data_Object" description="data object to check" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:obj_matches_field_constraints() - doc example" />
            </@item>

            <!-----------------------------------------
            |   set_field_data_type_constraint(field_name, data_type_constructor)
            ------------------------------------------>

            <@item title="set_field_data_type_constraint(field_name, data_type_constructor)">
                <div class="description">
                    <p>
                        Removes a Constraint.Field_Data_Type constraint (if exists) from the field constraints.
                        Also it seems intended to set new constraint using the <code>data_type_constructor</code> parameter, <mark> but it does not works</mark>.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:set_field_data_type_constraint() - doc example" />
            </@item>

            <!-----------------------------------------
            |   get_field_data_type_constraint(field_name)
            ------------------------------------------>

            <@item title="get_field_data_type_constraint(field_name)">
                <div class="description">
                    <p>
                        Returns a Constraint.Field_Data_Type constraint (if exists) for the specified field.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:get_field_data_type_constraint() - doc example" />
            </@item>

            <!-----------------------------------------
            |   ensure_field_constraint(field_name, field_info)
            ------------------------------------------>

            <@item title="ensure_field_constraint(field_name, field_info)">
                <div class="description">
                    <p>
                        Adds new Constraint.Field_Data_Type constraint for the specified field.
                        The constraint is created using <code>
                            <a href="@link:/core/constraint.js.html#from_obj">Constraint.from_obj</a>(field_info)
                        </code> call.
                    </p>
                    <p>
                        <mark>Ensuring the constraint again throws an exception.</mark>
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:ensure_field_constraint() - doc example" />
            </@item>

            <!-----------------------------------------
            |   matches_field_constraints()
            ------------------------------------------>

            <@overloads title="matches_field_constraints()">

                <@item title="matches_field_constraints()">
                    <div class="description">
                        <p>
                            <mark>Always returns undefined.</mark>
                        </p>
                    </div>

                    <h5>Example</h5>
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:matches_field_constraints() - doc example" />
                </@item>

                <!-----------------------------------------
                |   matches_field_constraints(obj)
                ------------------------------------------>

                <@item title="matches_field_constraints(obj)">
                    <div class="description">
                        <p>
                            <mark>Always returns undefined.</mark>
                        </p>
                    </div>

                    <h5>Example</h5>
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:matches_field_constraints(obj) - doc example" />
                </@item>

                <!-----------------------------------------
                |   matches_field_constraints(data_object)
                ------------------------------------------>

                <@item title="matches_field_constraints(data_object)">
                    <div class="description">
                        <p>
                            Checks the passed Data_Object to match field constraints from this Data_Object.
                        </p>
                        <p>
                            <mark>Returns false instead of true because of the Data_Value wrapping.</mark>
                        </p>
                    </div>

                    <h5>Parameters:</h5>
                    <@parms>
                        <@parm name="data_object" type="Data_Object" description="data object to check" />
                    </@parms>

                    <h5>Example</h5>
                    <@codeblock src="/z_core/data-object/Data_Object.spec.js:matches_field_constraints(data_object) - doc example" />
                </@item>

            </@overloads>

            <!-----------------------------------------
            |     static matches_field_constraints(data_object, field_constraints)
            ------------------------------------------>

            <@item title="static matches_field_constraints(data_object, field_constraints)">
                <div class="description">
                    <p>
                        <mark>Does nothing.</mark>
                    </p>
                </div>
            </@item>

        </@section>
        
        <!--==================================================
        =                   Requirements
        ===================================================-->

        <@section title="Requirements">
            
            <@item title="Remarks" class="overview">
                <p>
                    <mark>This feature seems not working.</mark>
                </p>
            </@item>
                       
            <!-----------------------------------------
            |   ____requires()
            ------------------------------------------>

            <@item title="____requires()">
                <div class="description">
                    <p>
                        Returns Data_Object requirements. There is no other way to set the requirements besides <code>_requirements</code> member variable assignement.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:____requires()" />
            </@item>

            <!-----------------------------------------
            |   _____meets_requirements()
            ------------------------------------------>

            <@item title="_____meets_requirements()">
                <div class="description">
                    <p>
                        Returns <code>true</code> if the Data_Object requirements was not set, returns <code>undefined</code> in other case.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:_____meets_requirements()" />
            </@item>

            <!-----------------------------------------
            |   _____check_requirements(...)
            ------------------------------------------>

            <@item title="_____check_requirements(...)">
                <div class="description">
                    <p>
                        Does nothing, always returns <code>undefined</code>.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:_____check_requirements()" />
            </@item>

        </@section>

        <!--==================================================
        =                   Utils
        ===================================================-->

        <@section title="Utils">
            
            <!-----------------------------------------
            |          keys()
            ------------------------------------------>

            <@item title="keys()">
                <div class="description">
                    <p>Returns array of the filed names.</p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:keys()" />
            </@item>

            <!-----------------------------------------
            |          stringify()
            ------------------------------------------>

            <@item title="stringify()">
                <div class="description">
                    <p>Returns a stringified representation of the Data_Object: a stringify() of the internal data surrounded by "Data_Object()" text.</p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:stringify()" />
            </@item>

            <!-----------------------------------------
            |          toObject()
            ------------------------------------------>

            <@item title="toObject()">
                <div class="description">
                    <p>Returns an object containing the Data_Object data.</p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:toObject()" />
            </@item>
       
            <!-----------------------------------------
            |   mod_link()
            ------------------------------------------>

            <@item title="mod_link()">
                <div class="description">
                    <p>
                        Returns the <a href="@link:/core/jsgui-lang-essentials.js.html">jsgui-lang-essentials</a> module reference.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:mod_link()" />
            </@item>

            <!-----------------------------------------
            |   each(callback)
            ------------------------------------------>

            <@item title="each(callback)">
                <div class="description">
                    <p>
                        Calls the <code>callback</code> function for each value in the Data_Object.
                    </p>
                </div>

                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="callback" type="function (name, value)" description="Callback function" />
                </@parms>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:each()" />
            </@item>

        </@section>
        
        <!--==================================================
        =                   Other
        ===================================================-->

        <@section title="Other">

            <!-----------------------------------------
            |   _get_input_processors()
            ------------------------------------------>

            <@item title="_get_input_processors()">
                <div class="description">
                    <p>
                        Returns <code>jsgui.input_processors</code> variable.
                    </p>
                </div>

                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:_get_input_processors()" />
            </@item>
            
            <!-----------------------------------------
            |     set_Enhanced_Data_Object(EDO)
            ------------------------------------------>

            <@item title="static set_Enhanced_Data_Object(EDO)">
                <div class="description">
                    <p>
                        Sets an internal <code>Enhanced_Data_Object</code> variable to the <code>EDO</code>.
                    </p>
                    <p>
                        If set, the variable is used as constructor to create a data object instance in the <a href="#dobj__obj_data_def">dobj()</a> function.
                    </p>
                </div>
                
                <h5>Parameters:</h5>
                <@parms>
                    <@parm name="EDO" type="Enhanced_Data_Object class" description="Enhanced data object class." />
                </@parms>
            
                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:get_Enhanced_Data_Object(), set_Enhanced_Data_Object()" />
            </@item>

            <!-----------------------------------------
            |     get_Enhanced_Data_Object()
            ------------------------------------------>

            <@item title="static get_Enhanced_Data_Object()">
                <div class="description">
                    <p>
                        Returns an internal <code>Enhanced_Data_Object</code> variable.
                    </p>
                </div>
                
                <h5>Example</h5>
                <@codeblock src="/z_core/data-object/Data_Object.spec.js:get_Enhanced_Data_Object(), set_Enhanced_Data_Object()" />
            </@item>

            <!-----------------------------------------
            |          Side effects
            ------------------------------------------>

            <@item title="Side effects" class="overview">

                <@codeblock>
                    jsgui.__data_id_method = 'init';

                    jsgui.map_classes = {};
                
                    jsgui.map_data_type_data_object_constructors = jsgui.map_data_type_data_object_constructors || {};
                    jsgui.map_data_type_data_object_constructors['boolean'] = Data_Value;

                    jsgui.ensure_data_type_data_object_constructor = ensure_data_type_data_object_constructor;

                    input_processors.field_text = parse_field_text;  // ??? not "jsgui.input_processors"
                    input_processors.data_type = parse_data_type;  // ???
                </@codeblock>
            
                <p id ="extend_side_effect">
                    The <code><a href="#extend__prop_post_init">extend(prop, post_init)</a></code> method contains the following side effect: if the derived class 
                    constructor (e.g. Collection) called without the <code>new</code> keyword with an other constructor (e.g. String) passed as parameter, then it sets 
                    <code>.abstract = true</code> for the passed constructor:
                </p>
                
                <@codeblock src="/z_core/side-effects/collection_string.spec.js:test Collection(String)" />
            </@item>
        
        
        </@section>
            
    </article>

</section>

